// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dbrepository_test

import (
	"github.com/doyyan/portdomainservice/domain/model"
	"sync"
)

// DBRepositoryMock is a mock implementation of repository.DBRepository.
//
// 	func TestSomethingThatUsesDBRepository(t *testing.T) {
//
// 		// make and configure a mocked repository.DBRepository
// 		mockedDBRepository := &DBRepositoryMock{
// 			CreatePortFunc: func(port model.Port) (model.Port, error) {
// 				panic("mock out the CreatePort method")
// 			},
// 			FindPortFunc: func(port model.Port) (bool, error) {
// 				panic("mock out the FindPort method")
// 			},
// 			UpdatePortFunc: func(port model.Port) (model.Port, error) {
// 				panic("mock out the UpdatePort method")
// 			},
// 		}
//
// 		// use mockedDBRepository in code that requires repository.DBRepository
// 		// and then make assertions.
//
// 	}
type DBRepositoryMock struct {
	// CreatePortFunc mocks the CreatePort method.
	CreatePortFunc func(port model.Port) (model.Port, error)

	// FindPortFunc mocks the FindPort method.
	FindPortFunc func(port model.Port) (bool, error)

	// UpdatePortFunc mocks the UpdatePort method.
	UpdatePortFunc func(port model.Port) (model.Port, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreatePort holds details about calls to the CreatePort method.
		CreatePort []struct {
			// Port is the port argument value.
			Port model.Port
		}
		// FindPort holds details about calls to the FindPort method.
		FindPort []struct {
			// Port is the port argument value.
			Port model.Port
		}
		// UpdatePort holds details about calls to the UpdatePort method.
		UpdatePort []struct {
			// Port is the port argument value.
			Port model.Port
		}
	}
	lockCreatePort sync.RWMutex
	lockFindPort   sync.RWMutex
	lockUpdatePort sync.RWMutex
}

// CreatePort calls CreatePortFunc.
func (mock DBRepositoryMock) CreatePort(port model.Port) (model.Port, error) {
	if mock.CreatePortFunc == nil {
		panic("DBRepositoryMock.CreatePortFunc: method is nil but DBRepository.CreatePort was just called")
	}
	callInfo := struct {
		Port model.Port
	}{
		Port: port,
	}
	mock.lockCreatePort.Lock()
	mock.calls.CreatePort = append(mock.calls.CreatePort, callInfo)
	mock.lockCreatePort.Unlock()
	return mock.CreatePortFunc(port)
}

// CreatePortCalls gets all the calls that were made to CreatePort.
// Check the length with:
//     len(mockedDBRepository.CreatePortCalls())
func (mock DBRepositoryMock) CreatePortCalls() []struct {
	Port model.Port
} {
	var calls []struct {
		Port model.Port
	}
	mock.lockCreatePort.RLock()
	calls = mock.calls.CreatePort
	mock.lockCreatePort.RUnlock()
	return calls
}

// FindPort calls FindPortFunc.
func (mock DBRepositoryMock) FindPort(port model.Port) (bool, error) {
	if mock.FindPortFunc == nil {
		panic("DBRepositoryMock.FindPortFunc: method is nil but DBRepository.FindPort was just called")
	}
	callInfo := struct {
		Port model.Port
	}{
		Port: port,
	}
	mock.lockFindPort.Lock()
	mock.calls.FindPort = append(mock.calls.FindPort, callInfo)
	mock.lockFindPort.Unlock()
	return mock.FindPortFunc(port)
}

// FindPortCalls gets all the calls that were made to FindPort.
// Check the length with:
//     len(mockedDBRepository.FindPortCalls())
func (mock DBRepositoryMock) FindPortCalls() []struct {
	Port model.Port
} {
	var calls []struct {
		Port model.Port
	}
	mock.lockFindPort.RLock()
	calls = mock.calls.FindPort
	mock.lockFindPort.RUnlock()
	return calls
}

// UpdatePort calls UpdatePortFunc.
func (mock DBRepositoryMock) UpdatePort(port model.Port) (model.Port, error) {
	if mock.UpdatePortFunc == nil {
		panic("DBRepositoryMock.UpdatePortFunc: method is nil but DBRepository.UpdatePort was just called")
	}
	callInfo := struct {
		Port model.Port
	}{
		Port: port,
	}
	mock.lockUpdatePort.Lock()
	mock.calls.UpdatePort = append(mock.calls.UpdatePort, callInfo)
	mock.lockUpdatePort.Unlock()
	return mock.UpdatePortFunc(port)
}

// UpdatePortCalls gets all the calls that were made to UpdatePort.
// Check the length with:
//     len(mockedDBRepository.UpdatePortCalls())
func (mock DBRepositoryMock) UpdatePortCalls() []struct {
	Port model.Port
} {
	var calls []struct {
		Port model.Port
	}
	mock.lockUpdatePort.RLock()
	calls = mock.calls.UpdatePort
	mock.lockUpdatePort.RUnlock()
	return calls
}
