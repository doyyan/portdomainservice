// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package portpresenter_test

import (
	"github.com/doyyan/portdomainservice/domain/model"
	"sync"
)

// PortsPresenterMock is a mock implementation of presenter.PortsPresenter.
//
// 	func TestSomethingThatUsesPortsPresenter(t *testing.T) {
//
// 		// make and configure a mocked presenter.PortsPresenter
// 		mockedPortsPresenter := &PortsPresenterMock{
// 			ResponsePortsFunc: func(ports []*model.Port) []*model.Port {
// 				panic("mock out the ResponsePorts method")
// 			},
// 		}
//
// 		// use mockedPortsPresenter in code that requires presenter.PortsPresenter
// 		// and then make assertions.
//
// 	}
type PortsPresenterMock struct {
	// ResponsePortsFunc mocks the ResponsePorts method.
	ResponsePortsFunc func(ports []*model.Port) []*model.Port

	// calls tracks calls to the methods.
	calls struct {
		// ResponsePorts holds details about calls to the ResponsePorts method.
		ResponsePorts []struct {
			// Ports is the ports argument value.
			Ports []*model.Port
		}
	}
	lockResponsePorts sync.RWMutex
}

// ResponsePorts calls ResponsePortsFunc.
func (mock *PortsPresenterMock) ResponsePorts(ports []*model.Port) []*model.Port {
	if mock.ResponsePortsFunc == nil {
		panic("PortsPresenterMock.ResponsePortsFunc: method is nil but PortsPresenter.ResponsePorts was just called")
	}
	callInfo := struct {
		Ports []*model.Port
	}{
		Ports: ports,
	}
	mock.lockResponsePorts.Lock()
	mock.calls.ResponsePorts = append(mock.calls.ResponsePorts, callInfo)
	mock.lockResponsePorts.Unlock()
	return mock.ResponsePortsFunc(ports)
}

// ResponsePortsCalls gets all the calls that were made to ResponsePorts.
// Check the length with:
//     len(mockedPortsPresenter.ResponsePortsCalls())
func (mock *PortsPresenterMock) ResponsePortsCalls() []struct {
	Ports []*model.Port
} {
	var calls []struct {
		Ports []*model.Port
	}
	mock.lockResponsePorts.RLock()
	calls = mock.calls.ResponsePorts
	mock.lockResponsePorts.RUnlock()
	return calls
}
