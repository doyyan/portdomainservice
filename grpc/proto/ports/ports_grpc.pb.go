// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ports/ports.proto

package ports

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreatePortsClient is the client API for CreatePorts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreatePortsClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *CreateOrUpdatePortsRequest, opts ...grpc.CallOption) (*CreateOrUpdatePortsResponse, error)
}

type createPortsClient struct {
	cc grpc.ClientConnInterface
}

func NewCreatePortsClient(cc grpc.ClientConnInterface) CreatePortsClient {
	return &createPortsClient{cc}
}

func (c *createPortsClient) SayHello(ctx context.Context, in *CreateOrUpdatePortsRequest, opts ...grpc.CallOption) (*CreateOrUpdatePortsResponse, error) {
	out := new(CreateOrUpdatePortsResponse)
	err := c.cc.Invoke(ctx, "/ports.CreatePorts/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreatePortsServer is the server API for CreatePorts service.
// All implementations must embed UnimplementedCreatePortsServer
// for forward compatibility
type CreatePortsServer interface {
	// Sends a greeting
	SayHello(context.Context, *CreateOrUpdatePortsRequest) (*CreateOrUpdatePortsResponse, error)
	mustEmbedUnimplementedCreatePortsServer()
}

// UnimplementedCreatePortsServer must be embedded to have forward compatible implementations.
type UnimplementedCreatePortsServer struct {
}

func (UnimplementedCreatePortsServer) SayHello(context.Context, *CreateOrUpdatePortsRequest) (*CreateOrUpdatePortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedCreatePortsServer) mustEmbedUnimplementedCreatePortsServer() {}

// UnsafeCreatePortsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreatePortsServer will
// result in compilation errors.
type UnsafeCreatePortsServer interface {
	mustEmbedUnimplementedCreatePortsServer()
}

func RegisterCreatePortsServer(s grpc.ServiceRegistrar, srv CreatePortsServer) {
	s.RegisterService(&CreatePorts_ServiceDesc, srv)
}

func _CreatePorts_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdatePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatePortsServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ports.CreatePorts/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatePortsServer).SayHello(ctx, req.(*CreateOrUpdatePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreatePorts_ServiceDesc is the grpc.ServiceDesc for CreatePorts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreatePorts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ports.CreatePorts",
	HandlerType: (*CreatePortsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _CreatePorts_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ports/ports.proto",
}

// UpdatePortsClient is the client API for UpdatePorts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdatePortsClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *CreateOrUpdatePortsRequest, opts ...grpc.CallOption) (*CreateOrUpdatePortsResponse, error)
}

type updatePortsClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdatePortsClient(cc grpc.ClientConnInterface) UpdatePortsClient {
	return &updatePortsClient{cc}
}

func (c *updatePortsClient) SayHello(ctx context.Context, in *CreateOrUpdatePortsRequest, opts ...grpc.CallOption) (*CreateOrUpdatePortsResponse, error) {
	out := new(CreateOrUpdatePortsResponse)
	err := c.cc.Invoke(ctx, "/ports.UpdatePorts/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdatePortsServer is the server API for UpdatePorts service.
// All implementations must embed UnimplementedUpdatePortsServer
// for forward compatibility
type UpdatePortsServer interface {
	// Sends a greeting
	SayHello(context.Context, *CreateOrUpdatePortsRequest) (*CreateOrUpdatePortsResponse, error)
	mustEmbedUnimplementedUpdatePortsServer()
}

// UnimplementedUpdatePortsServer must be embedded to have forward compatible implementations.
type UnimplementedUpdatePortsServer struct {
}

func (UnimplementedUpdatePortsServer) SayHello(context.Context, *CreateOrUpdatePortsRequest) (*CreateOrUpdatePortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedUpdatePortsServer) mustEmbedUnimplementedUpdatePortsServer() {}

// UnsafeUpdatePortsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdatePortsServer will
// result in compilation errors.
type UnsafeUpdatePortsServer interface {
	mustEmbedUnimplementedUpdatePortsServer()
}

func RegisterUpdatePortsServer(s grpc.ServiceRegistrar, srv UpdatePortsServer) {
	s.RegisterService(&UpdatePorts_ServiceDesc, srv)
}

func _UpdatePorts_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdatePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdatePortsServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ports.UpdatePorts/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdatePortsServer).SayHello(ctx, req.(*CreateOrUpdatePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdatePorts_ServiceDesc is the grpc.ServiceDesc for UpdatePorts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdatePorts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ports.UpdatePorts",
	HandlerType: (*UpdatePortsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _UpdatePorts_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ports/ports.proto",
}
